#! /usr/bin/env stap

global fault_entry_time, fault_address, fault_access
global time_offset
global in_mark

probe begin {
   time_offset = gettimeofday_us()
   in_mark = 0
 }

probe vm.pagefault {
  t = gettimeofday_us()
  id = tid()
  fault_entry_time[id] = t
  fault_address[id] = address
  fault_access[id] = write_access ? "w" : "r"
}

probe vm.pagefault.return {
  t=gettimeofday_us()
  id = tid()
  if (!(id in fault_entry_time)) next
  e = t - fault_entry_time[id]
  if (vm_fault_contains(fault_type,VM_FAULT_MINOR)) {
    ftype=0
  } else if (vm_fault_contains(fault_type,VM_FAULT_MAJOR)) {
    ftype=1
  } else {
    next #only want to deal with minor and major page faults
  }
  if(in_mark == 1){
       printf("%d,%id,%d,%d\n", t, fault_address[id], id, ftype)
  }
  #free up memory
  delete fault_entry_time[id]
  delete fault_address[id]
  delete fault_access[id]
}

probe process("/home/tandon/Projects/JVM_Baseline/NVJVM/build/linux-amd64/lib/amd64/server/libjvm.so").mark("mark_from_roots_begin")
{
  t=gettimeofday_us()
  in_mark = 1
  printf("*,%d\n", t)
}

probe process("/home/tandon/Projects/JVM_Baseline/NVJVM/build/linux-amd64/lib/amd64/server/libjvm.so").mark("mark_from_roots_end")
{
  t=gettimeofday_us()
  in_mark = 0
  printf("**,%d\n", t)
} 

