#! /usr/bin/env stap

//constants
global DEAD=-1, RUNNING=1, QUEUED=2, SLEEPING=3

global run_time, queued_time, sleep_time, iowait_time, iowait_time_mark_begin, iowait_time_mark_end
global pid_state, pid_names
global old_run_time, old_queued_time, old_sleep_time, old_iowait_time

// For new enough kernels, roughly 2.6.32+, the @defined(@task->in_iowait)
// tests will succeed and reduce these macros to nothing, including these
// pid-iowait arrays.  For older kernels, the rq fallback will remain.
global pid_in_iowait
global pid_iowait_count

global total_faults, total_faults_mark_begin, total_faults_mark_end

probe vm.pagefault.return {
  if (vm_fault_contains(fault_type,VM_FAULT_MAJOR)){
    id = tid() 
    total_faults[id] += 1
  }
}

@define in_iowait(task) %(
  @choose_defined(@task->in_iowait,
    (pid_in_iowait[@task->pid] ? pid_in_iowait[@task->pid]-- : 0))
%)

@define clear_iowait(rq, task) %(
    if (!@defined(@task->in_iowait))
      pid_iowait_count[@task->pid] = @nr_iowait(@rq)
%)

@define set_iowait(rq, task) %(
    if (!@defined(@task->in_iowait))
      pid_in_iowait[@task->pid] = (@nr_iowait(@rq) > pid_iowait_count[@task->pid])
%)

@define nr_iowait(rq) %(
    atomic_read(&@cast(@rq, "rq")->nr_iowait)
%)

global previous_timestamp

function timestamp()
{
  return cpu_clock_us(0)
}

function update_times(pid, now)
{
  delta = now - previous_timestamp[pid]
  previous_timestamp[pid] = now

  if ((state = pid_state[pid]) > 0) {
    if (state == SLEEPING)
      sleep_time[pid] += delta
    else if (state == QUEUED)
      queued_time[pid] += delta
    else if (state == RUNNING)
      run_time[pid] += delta
  }

  return delta
}


function task_targeted(task)
{
  pid = task_pid(task)
  if (pid && (!target() || target_set_pid(pid))) {
    pid_names[task_tid(task)] = task_execname(task)
    return 1
  }
  return 0
}


probe kernel.trace("sched_switch")
{
  // Task $prev is scheduled off this cpu
  if (task_targeted($prev)) {
    pid = $prev->pid
    state = $prev->state
    update_times(pid, timestamp())

    if (state > 0) {
      @set_iowait($rq, $prev)
      pid_state[pid] = SLEEPING
    } else if (state == 0) {
      pid_state[pid] = QUEUED
    } else {
      pid_state[pid] = DEAD
    }
  }

  // Task $next is scheduled onto this cpu
  if (task_targeted($next)) {
    pid = $next->pid
    update_times(pid, timestamp())

    @clear_iowait($rq, $next)
    pid_state[pid] = RUNNING
  }
}

probe kernel.trace("sched_wakeup")
{
  // Task $p is awakened
  if ($success && task_targeted($p)) {
    pid = $p->pid
    delta = update_times(pid, timestamp())
    if (pid_state[pid] == SLEEPING && @in_iowait($p)) {
      iowait_time[pid] += delta
    }
    pid_state[pid] = QUEUED
  }
}

// Give task $p a final accounting
probe kernel.trace("sched_process_exit")
{
  if (task_targeted($p)) {
    pid = $p->pid
    update_times(pid, timestamp())
    pid_state[pid] = DEAD
  }
}

probe process("/home/tandon/Projects/JVM_Baseline/NVJVM/build/linux-amd64/lib/amd64/server/libjvm.so").mark("compaction_begin")
{
   t = timestamp()
   foreach (pid+ in pid_state) {
      update_times(pid, t)
      if(pid_names[pid] == "java"){
        iowait_time_mark_begin[pid] = iowait_time[pid]
        total_faults_mark_begin[pid] = total_faults[pid]
      }
   } 
}

probe process("/home/tandon/Projects/JVM_Baseline/NVJVM/build/linux-amd64/lib/amd64/server/libjvm.so").mark("compaction_end")
{
  printf("mark_from_roots_end\n")
  t = timestamp()
  foreach (pid+ in pid_state) {
    update_times(pid, t)
    if(pid_names[pid] == "java"){
     iowait_time_mark_end[pid] = iowait_time[pid]
     total_faults_mark_end[pid] = total_faults[pid]
     iowait_time_mark_phase =  iowait_time_mark_end[pid] - iowait_time_mark_begin[pid] 
     total_faults_mark_phase = total_faults_mark_end[pid] - total_faults_mark_begin[pid]
     printf("%6d %10d %10d\n", pid, iowait_time_mark_phase, total_faults_mark_phase)
    }
 }
} 

probe process("/home/tandon/Projects/JVM_Baseline/NVJVM/build/linux-amd64/lib/amd64/server/libjvm.so").mark("vm_exit")
{
  printf("vm_exit\n")
  t = timestamp()
  foreach (pid+ in pid_state) { 
    update_times(pid, t)
    if(pid_names[pid] == "java"){
      printf("%6d %10d %10d %10d\n", pid, iowait_time[pid], total_faults[pid], run_time[pid])
    } 
  }
}




